// 
// Copyright (c) Facebook, Inc. and its affiliates.
//
// This source code is licensed under the MIT license found in the
// LICENSE file in the root directory of this source tree.

.source_language = "C" @?

declare __assert_fail(*ptr_elt, *ptr_elt, int, *ptr_elt) : void

define add(var0: int, var1: int) : int {
  local n2: int, n1: int
  #: @[14:0]
      n13 = load &var0 @[14:0]
      store &n1 <- n13 @[14:0]
      n14 = load &var1 @[14:0]
      store &n2 <- n14 @[14:0]
      n23 = load &n1 @[14:34]
      n24 = load &n2 @[14:39]
      ret __sil_plusa_int(n23, n24) @[14:27]
      
} @?

declare bar() : void

define call_add() : int {
  #: @[30:25]
      n58 = add(1, 2) @[30:25]
      jmp 1::ret @[30:25]
      
  #1::ret: @[30:18]
      ret n58 @[30:18]
      
} @?

define call_add1(var0: *int, var1: int) : int {
  local y: int, ptr: *int
  #: @[48:0]
      n100 = load &var0 @[48:0]
      store &ptr <- n100 @[48:0]
      n101 = load &var1 @[48:0]
      store &y <- n101 @[48:0]
      n110 = load &ptr @[48:46]
      n111 = load n110 @[48:45]
      n112 = load &y @[48:51]
      n113 = add(n111, n112) @[48:41]
      jmp 8::ret @[48:41]
      
  #8::ret: @[48:34]
      ret n113 @[48:34]
      
} @?

declare foo() : void

declare free(*ptr_elt) : void

define main() : int {
  local var1: int
  #: @[11:0]
      store &var1 <- 0 @[11:0]
      ret 0 @[11:14]
      
} @?

declare malloc(int) : void

declare my_fun(*ptr_elt) : void

define test() : *int {
  #: @[12:15]
      ret null @[12:15]
      
} @?

define test10() : int {
  local sum: int, i: int
  #: @[69:7]
      store &sum <- 0 @[69:7]
      store &i <- 0 @[70:12]
      jmp 3 @[70:8]
      
  #10: @[70:27]
      n187 = load &i @[70:27]
      store &i <- __sil_plusa_int(n187, 1) @[70:27]
      jmp 3 @[70:3]
      
  #13: @[73:3]
      n192 = load &sum @[73:3]
      if __sil_eq(n192, 3) then jmp 18 else jmp 17 @[73:3]
      
  #17: @[73:3]
      _ = __assert_fail("sum == 3", "base.c", 73, "int test10()") @[73:3]
      jmp __assert_fail::void::ret @[73:3]
      
  #18: @[74:10]
      n201 = load &sum @[74:10]
      ret n201 @[74:3]
      
  #3: @[70:19]
      n177 = load &i @[70:19]
      if __sil_lt(n177, 3) then jmp 6 else jmp 13 @[70:3]
      
  #6: @[71:12]
      n181 = load &i @[71:12]
      n182 = load &sum @[71:9]
      store &sum <- __sil_plusa_int(n182, n181) @[71:9]
      jmp 10 @[72:3]
      
  #__assert_fail::void::ret: @[73:3]
      unreachable @[73:3]
      
} @?

define test11() : void {
  #: @[77:16]
      ret null @[77:16]
      
} @?

define test12() : void {
  local str: *ptr_elt
  #: @[82:3]
      _ = my_fun("hello") @[82:3]
      jmp my_fun::void::ret @[82:3]
      
  #my_fun::void::1::ret: @[85:1]
      ret null @[85:1]
      
  #my_fun::void::ret: @[84:10]
      n216 = load &str @[84:10]
      _ = my_fun(n216) @[84:3]
      jmp my_fun::void::1::ret @[84:3]
      
} @?

define test2() : int {
  local n2: int, n1: int
  #: @[19:10]
      n33 = load &n1 @[19:10]
      n34 = load &n2 @[19:15]
      ret __sil_plusa_int(n33, n34) @[19:3]
      
} @?

define test3(var0: *int) : int {
  local ptr: *int
  #: @[22:0]
      n37 = load &var0 @[22:0]
      store &ptr <- n37 @[22:0]
      n43 = load &ptr @[22:31]
      n44 = load n43 @[22:30]
      ret n44 @[22:23]
      
} @?

define test4() : int {
  #: @[26:22]
      n48 = foo() @[26:22]
      jmp 1::ret @[26:22]
      
  #1::ret: @[26:15]
      ret n48 @[26:15]
      
} @?

define test5() : int {
  #: @[28:22]
      n53 = bar() @[28:22]
      jmp 1::ret @[28:22]
      
  #1::ret: @[28:15]
      ret n53 @[28:15]
      
} @?

define test6() : int {
  local var1: int, ptr: *int
  #: @[33:8]
      store &ptr <- null @[33:8]
      n66 = call_add() @[34:7]
      jmp 3::ret @[34:7]
      
  #3::ret: @[34:18]
      if __sil_eq(n66, 3) then jmp 5 else jmp 8 @[34:18]
      
  #5: @[35:13]
      n70 = load &ptr @[35:13]
      n71 = load n70 @[35:12]
      store &var1 <- n71 @[35:5]
      jmp 9 @[35:5]
      
  #8: @[37:5]
      store &var1 <- 0 @[37:5]
      jmp 9 @[37:5]
      
  #9: @[38:1]
      n78 = load &var1 @[38:1]
      ret n78 @[38:1]
      
} @?

define test7() : int {
  local var1: int, ptr: *int
  #: @[41:8]
      store &ptr <- null @[41:8]
      n86 = call_add() @[42:7]
      jmp 3::ret @[42:7]
      
  #3::ret: @[42:18]
      if __sil_eq(n86, 5) then jmp 5 else jmp 8 @[42:18]
      
  #5: @[43:13]
      n90 = load &ptr @[43:13]
      n91 = load n90 @[43:12]
      store &var1 <- n91 @[43:5]
      jmp 9 @[43:5]
      
  #8: @[45:5]
      store &var1 <- 0 @[45:5]
      jmp 9 @[45:5]
      
  #9: @[46:1]
      n98 = load &var1 @[46:1]
      ret n98 @[46:1]
      
} @?

define test8(var0: *int) : int {
  local var2: int, ret: int, ptr: *int, null_ptr: *int
  #: @[50:0]
      n115 = load &var0 @[50:0]
      store &ptr <- n115 @[50:0]
      n124 = load &ptr @[51:4]
      store n124 <- 1 @[51:8]
      store &null_ptr <- null @[52:8]
      n129 = load &ptr @[53:23]
      n130 = call_add1(n129, 2) @[53:13]
      jmp 8::ret @[53:13]
      
  #11: @[55:13]
      n136 = load &null_ptr @[55:13]
      n137 = load n136 @[55:12]
      store &var2 <- n137 @[55:5]
      jmp 15 @[55:5]
      
  #14: @[57:5]
      store &var2 <- 0 @[57:5]
      jmp 15 @[57:5]
      
  #15: @[58:1]
      n144 = load &var2 @[58:1]
      ret n144 @[58:1]
      
  #8::ret: @[53:7]
      store &ret <- n130 @[53:7]
      n132 = load &ret @[54:7]
      if __sil_eq(n132, 3) then jmp 11 else jmp 14 @[54:11]
      
} @?

define test9() : int {
  local ret: int, ptr: *int
  #: @[61:14]
      n151 = __sil_malloc(<int>) @[61:14]
      store &ptr <- n151 @[61:8]
      n153 = load &ptr @[62:4]
      store n153 <- 42 @[62:8]
      n156 = load &ptr @[63:14]
      n157 = load n156 @[63:13]
      store &ret <- n157 @[63:7]
      n159 = load &ptr @[64:8]
      _ = __sil_free(n159) @[64:3]
      n161 = load &ret @[65:10]
      ret n161 @[65:3]
      
} @?

global __PRETTY_FUNCTION__::test10: *ptr_elt

global ::str::2: *ptr_elt

global ::str::1: *ptr_elt

global ::str: *ptr_elt

