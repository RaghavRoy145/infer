// 
// Copyright (c) Facebook, Inc. and its affiliates.
//
// This source code is licensed under the MIT license found in the
// LICENSE file in the root directory of this source tree.

.source_language = "C" @?

declare __assert_fail(*ptr_elt, *ptr_elt, int, *ptr_elt) : void

define add(var0: int, var1: int) : int {
  local n2: int, n1: int
  #: @[14:0]
      n15 = load &var0 @[14:0]
      store &n1 <- n15 @[14:0]
      n16 = load &var1 @[14:0]
      store &n2 <- n16 @[14:0]
      n25 = load &n1 @[14:34]
      n26 = load &n2 @[14:39]
      ret __sil_plusa_int(n25, n26) @[14:27]
      
} @?

declare bar() : void

define call_add() : int {
  #: @[30:25]
      n60 = add(1, 2) @[30:25]
      jmp 1::ret @[30:25]
      
  #1::ret: @[30:18]
      ret n60 @[30:18]
      
} @?

define call_add1(var0: *int, var1: int) : int {
  local y: int, ptr: *int
  #: @[48:0]
      n102 = load &var0 @[48:0]
      store &ptr <- n102 @[48:0]
      n103 = load &var1 @[48:0]
      store &y <- n103 @[48:0]
      n112 = load &ptr @[48:46]
      n113 = load n112 @[48:45]
      n114 = load &y @[48:51]
      n115 = add(n113, n114) @[48:41]
      jmp 8::ret @[48:41]
      
  #8::ret: @[48:34]
      ret n115 @[48:34]
      
} @?

declare foo() : void

declare free(*ptr_elt) : void

define main() : int {
  local var1: int
  #: @[11:0]
      store &var1 <- 0 @[11:0]
      ret 0 @[11:14]
      
} @?

declare malloc(int) : void

declare my_fun(*ptr_elt) : void

define test() : *int {
  #: @[12:15]
      ret null @[12:15]
      
} @?

define test10() : int {
  local sum: int, i: int
  #: @[69:7]
      store &sum <- 0 @[69:7]
      store &i <- 0 @[70:12]
      jmp 3 @[70:8]
      
  #10: @[70:27]
      n189 = load &i @[70:27]
      store &i <- __sil_plusa_int(n189, 1) @[70:27]
      jmp 3 @[70:3]
      
  #13: @[73:3]
      n194 = load &sum @[73:3]
      if __sil_ne(n194, 3) then jmp 18 else jmp 17 @[73:3]
      
  #17: @[73:3]
      _ = __sil_assert_fail("sum != 3", "base.c", 73, "int test10()") @[73:3]
      jmp __assert_fail::void::ret @[73:3]
      
  #18: @[74:10]
      n203 = load &sum @[74:10]
      ret n203 @[74:3]
      
  #3: @[70:19]
      n179 = load &i @[70:19]
      if __sil_lt(n179, 3) then jmp 6 else jmp 13 @[70:3]
      
  #6: @[71:12]
      n183 = load &i @[71:12]
      n184 = load &sum @[71:9]
      store &sum <- __sil_plusa_int(n184, n183) @[71:9]
      jmp 10 @[72:3]
      
  #__assert_fail::void::ret: @[73:3]
      unreachable @[73:3]
      
} @?

define test11() : void {
  #: @[77:16]
      ret null @[77:16]
      
} @?

define test12() : void {
  local str: *ptr_elt
  #: @[82:3]
      _ = my_fun("hello") @[82:3]
      jmp my_fun::void::ret @[82:3]
      
  #my_fun::void::1::ret: @[85:1]
      ret null @[85:1]
      
  #my_fun::void::ret: @[84:10]
      n218 = load &str @[84:10]
      _ = my_fun(n218) @[84:3]
      jmp my_fun::void::1::ret @[84:3]
      
} @?

define test13() : int {
  local i: int
  #: @[88:7]
      store &i <- 10 @[88:7]
      jmp 2 @[89:3]
      
  #12: @[92:3]
      _ = __sil_assert_fail("i != 7", "base.c", 92, "int test13()") @[92:3]
      jmp __assert_fail::void::ret @[92:3]
      
  #13: @[93:10]
      n248 = load &i @[93:10]
      ret n248 @[93:3]
      
  #2: @[89:10]
      n230 = load &i @[89:10]
      if __sil_ge(n230, 8) then jmp 5 else jmp 8 @[89:3]
      
  #5: @[90:6]
      n234 = load &i @[90:6]
      store &i <- __sil_plusa_int(n234, -1) @[90:6]
      jmp 2 @[89:3]
      
  #8: @[92:3]
      n239 = load &i @[92:3]
      if __sil_ne(n239, 7) then jmp 13 else jmp 12 @[92:3]
      
  #__assert_fail::void::ret: @[92:3]
      unreachable @[92:3]
      
} @?

define test14(var0: *ptr_elt) : int {
  local person: *ptr_elt
  #: @[101:0]
      n250 = load &var0 @[101:0]
      store &person <- n250 @[101:0]
      n256 = load &person @[101:44]
      n258 = load n256.struct::Person.field_1 @[101:52]
      ret n258 @[101:37]
      
} @?

define test2() : int {
  local n2: int, n1: int
  #: @[19:10]
      n35 = load &n1 @[19:10]
      n36 = load &n2 @[19:15]
      ret __sil_plusa_int(n35, n36) @[19:3]
      
} @?

define test3(var0: *int) : int {
  local ptr: *int
  #: @[22:0]
      n39 = load &var0 @[22:0]
      store &ptr <- n39 @[22:0]
      n45 = load &ptr @[22:31]
      n46 = load n45 @[22:30]
      ret n46 @[22:23]
      
} @?

define test4() : int {
  #: @[26:22]
      n50 = foo() @[26:22]
      jmp 1::ret @[26:22]
      
  #1::ret: @[26:15]
      ret n50 @[26:15]
      
} @?

define test5() : int {
  #: @[28:22]
      n55 = bar() @[28:22]
      jmp 1::ret @[28:22]
      
  #1::ret: @[28:15]
      ret n55 @[28:15]
      
} @?

define test6() : int {
  local var1: int, ptr: *int
  #: @[33:8]
      store &ptr <- null @[33:8]
      n68 = call_add() @[34:7]
      jmp 3::ret @[34:7]
      
  #3::ret: @[34:18]
      if __sil_eq(n68, 3) then jmp 5 else jmp 8 @[34:18]
      
  #5: @[35:13]
      n72 = load &ptr @[35:13]
      n73 = load n72 @[35:12]
      store &var1 <- n73 @[35:5]
      jmp 9 @[35:5]
      
  #8: @[37:5]
      store &var1 <- 0 @[37:5]
      jmp 9 @[37:5]
      
  #9: @[38:1]
      n80 = load &var1 @[38:1]
      ret n80 @[38:1]
      
} @?

define test7() : int {
  local var1: int, ptr: *int
  #: @[41:8]
      store &ptr <- null @[41:8]
      n88 = call_add() @[42:7]
      jmp 3::ret @[42:7]
      
  #3::ret: @[42:18]
      if __sil_eq(n88, 5) then jmp 5 else jmp 8 @[42:18]
      
  #5: @[43:13]
      n92 = load &ptr @[43:13]
      n93 = load n92 @[43:12]
      store &var1 <- n93 @[43:5]
      jmp 9 @[43:5]
      
  #8: @[45:5]
      store &var1 <- 0 @[45:5]
      jmp 9 @[45:5]
      
  #9: @[46:1]
      n100 = load &var1 @[46:1]
      ret n100 @[46:1]
      
} @?

define test8(var0: *int) : int {
  local var2: int, ret: int, ptr: *int, null_ptr: *int
  #: @[50:0]
      n117 = load &var0 @[50:0]
      store &ptr <- n117 @[50:0]
      n126 = load &ptr @[51:4]
      store n126 <- 1 @[51:8]
      store &null_ptr <- null @[52:8]
      n131 = load &ptr @[53:23]
      n132 = call_add1(n131, 2) @[53:13]
      jmp 8::ret @[53:13]
      
  #11: @[55:13]
      n138 = load &null_ptr @[55:13]
      n139 = load n138 @[55:12]
      store &var2 <- n139 @[55:5]
      jmp 15 @[55:5]
      
  #14: @[57:5]
      store &var2 <- 0 @[57:5]
      jmp 15 @[57:5]
      
  #15: @[58:1]
      n146 = load &var2 @[58:1]
      ret n146 @[58:1]
      
  #8::ret: @[53:7]
      store &ret <- n132 @[53:7]
      n134 = load &ret @[54:7]
      if __sil_eq(n134, 3) then jmp 11 else jmp 14 @[54:11]
      
} @?

define test9() : int {
  local ret: int, ptr: *int
  #: @[61:14]
      n153 = __sil_malloc(<int>) @[61:14]
      store &ptr <- n153 @[61:8]
      n155 = load &ptr @[62:4]
      store n155 <- 42 @[62:8]
      n158 = load &ptr @[63:14]
      n159 = load n158 @[63:13]
      store &ret <- n159 @[63:7]
      n161 = load &ptr @[64:8]
      _ = __sil_free(n161) @[64:3]
      n163 = load &ret @[65:10]
      ret n163 @[65:3]
      
} @?

global __PRETTY_FUNCTION__::test13: *ptr_elt

global __PRETTY_FUNCTION__::test10: *ptr_elt

global ::str::3: *ptr_elt

global ::str::2: *ptr_elt

global ::str::1: *ptr_elt

global ::str: *ptr_elt

type struct::Person = {field_0: *ptr_elt; field_1: int}

